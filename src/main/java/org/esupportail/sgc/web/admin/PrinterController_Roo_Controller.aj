// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.esupportail.sgc.web.admin;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.esupportail.sgc.domain.Printer;
import org.esupportail.sgc.web.admin.PrinterController;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PrinterController_Roo_Controller {
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String PrinterController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("printer", Printer.findPrinter(id));
        uiModel.addAttribute("itemId", id);
        return "admin/printers/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PrinterController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("printers", Printer.findPrinterEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) Printer.countPrinters() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("printers", Printer.findAllPrinters(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "admin/printers/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PrinterController.update(@Valid Printer printer, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, printer);
            return "admin/printers/update";
        }
        uiModel.asMap().clear();
        printer.merge();
        return "redirect:/admin/printers/" + encodeUrlPathSegment(printer.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String PrinterController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, Printer.findPrinter(id));
        return "admin/printers/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String PrinterController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Printer printer = Printer.findPrinter(id);
        printer.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/admin/printers";
    }
    
    void PrinterController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("printer_connectiondate_date_format", "dd/MM/yyyy - HH:mm");
    }
    
    void PrinterController.populateEditForm(Model uiModel, Printer printer) {
        uiModel.addAttribute("printer", printer);
        addDateTimeFormatPatterns(uiModel);
    }

    
}
