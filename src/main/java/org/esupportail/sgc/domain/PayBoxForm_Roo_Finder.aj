// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.esupportail.sgc.domain;

import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.esupportail.sgc.domain.PayBoxForm;

privileged aspect PayBoxForm_Roo_Finder {
    
    public static Long PayBoxForm.countFindPayBoxFormsByCommandeEquals(String commande) {
        if (commande == null || commande.length() == 0) throw new IllegalArgumentException("The commande argument is required");
        EntityManager em = PayBoxForm.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM PayBoxForm AS o WHERE o.commande = :commande", Long.class);
        q.setParameter("commande", commande);
        return ((Long) q.getSingleResult());
    }
    
    public static Long PayBoxForm.countFindPayBoxFormsByRequestDateLessThan(Date requestDate) {
        if (requestDate == null) throw new IllegalArgumentException("The requestDate argument is required");
        EntityManager em = PayBoxForm.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM PayBoxForm AS o WHERE o.requestDate < :requestDate", Long.class);
        q.setParameter("requestDate", requestDate);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<PayBoxForm> PayBoxForm.findPayBoxFormsByCommandeEquals(String commande) {
        if (commande == null || commande.length() == 0) throw new IllegalArgumentException("The commande argument is required");
        EntityManager em = PayBoxForm.entityManager();
        TypedQuery<PayBoxForm> q = em.createQuery("SELECT o FROM PayBoxForm AS o WHERE o.commande = :commande", PayBoxForm.class);
        q.setParameter("commande", commande);
        return q;
    }
    
    public static TypedQuery<PayBoxForm> PayBoxForm.findPayBoxFormsByCommandeEquals(String commande, String sortFieldName, String sortOrder) {
        if (commande == null || commande.length() == 0) throw new IllegalArgumentException("The commande argument is required");
        EntityManager em = PayBoxForm.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM PayBoxForm AS o WHERE o.commande = :commande");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<PayBoxForm> q = em.createQuery(queryBuilder.toString(), PayBoxForm.class);
        q.setParameter("commande", commande);
        return q;
    }
    
    public static TypedQuery<PayBoxForm> PayBoxForm.findPayBoxFormsByRequestDateLessThan(Date requestDate) {
        if (requestDate == null) throw new IllegalArgumentException("The requestDate argument is required");
        EntityManager em = PayBoxForm.entityManager();
        TypedQuery<PayBoxForm> q = em.createQuery("SELECT o FROM PayBoxForm AS o WHERE o.requestDate < :requestDate", PayBoxForm.class);
        q.setParameter("requestDate", requestDate);
        return q;
    }
    
    public static TypedQuery<PayBoxForm> PayBoxForm.findPayBoxFormsByRequestDateLessThan(Date requestDate, String sortFieldName, String sortOrder) {
        if (requestDate == null) throw new IllegalArgumentException("The requestDate argument is required");
        EntityManager em = PayBoxForm.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM PayBoxForm AS o WHERE o.requestDate < :requestDate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<PayBoxForm> q = em.createQuery(queryBuilder.toString(), PayBoxForm.class);
        q.setParameter("requestDate", requestDate);
        return q;
    }
    
}
