// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.esupportail.sgc.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.esupportail.sgc.domain.CrousSmartCard;

privileged aspect CrousSmartCard_Roo_Finder {
    
    public static Long CrousSmartCard.countFindCrousSmartCardsByUidEquals(String uid) {
        if (uid == null || uid.length() == 0) throw new IllegalArgumentException("The uid argument is required");
        EntityManager em = CrousSmartCard.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM CrousSmartCard AS o WHERE o.uid = :uid", Long.class);
        q.setParameter("uid", uid);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<CrousSmartCard> CrousSmartCard.findCrousSmartCardsByUidEquals(String uid) {
        if (uid == null || uid.length() == 0) throw new IllegalArgumentException("The uid argument is required");
        EntityManager em = CrousSmartCard.entityManager();
        TypedQuery<CrousSmartCard> q = em.createQuery("SELECT o FROM CrousSmartCard AS o WHERE o.uid = :uid", CrousSmartCard.class);
        q.setParameter("uid", uid);
        return q;
    }
    
    public static TypedQuery<CrousSmartCard> CrousSmartCard.findCrousSmartCardsByUidEquals(String uid, String sortFieldName, String sortOrder) {
        if (uid == null || uid.length() == 0) throw new IllegalArgumentException("The uid argument is required");
        EntityManager em = CrousSmartCard.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM CrousSmartCard AS o WHERE o.uid = :uid");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<CrousSmartCard> q = em.createQuery(queryBuilder.toString(), CrousSmartCard.class);
        q.setParameter("uid", uid);
        return q;
    }
    
}
