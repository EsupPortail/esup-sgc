// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.esupportail.sgc.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.esupportail.sgc.domain.TemplateCard;

privileged aspect TemplateCard_Roo_Finder {
    
    public static Long TemplateCard.countFindTemplateCardsByKeyEquals(String key) {
        if (key == null || key.length() == 0) throw new IllegalArgumentException("The key argument is required");
        EntityManager em = TemplateCard.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM TemplateCard AS o WHERE o.key = :key", Long.class);
        q.setParameter("key", key);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<TemplateCard> TemplateCard.findTemplateCardsByKeyEquals(String key) {
        if (key == null || key.length() == 0) throw new IllegalArgumentException("The key argument is required");
        EntityManager em = TemplateCard.entityManager();
        TypedQuery<TemplateCard> q = em.createQuery("SELECT o FROM TemplateCard AS o WHERE o.key = :key", TemplateCard.class);
        q.setParameter("key", key);
        return q;
    }
    
    public static TypedQuery<TemplateCard> TemplateCard.findTemplateCardsByKeyEquals(String key, String sortFieldName, String sortOrder) {
        if (key == null || key.length() == 0) throw new IllegalArgumentException("The key argument is required");
        EntityManager em = TemplateCard.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM TemplateCard AS o WHERE o.key = :key");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<TemplateCard> q = em.createQuery(queryBuilder.toString(), TemplateCard.class);
        q.setParameter("key", key);
        return q;
    }
    
}
