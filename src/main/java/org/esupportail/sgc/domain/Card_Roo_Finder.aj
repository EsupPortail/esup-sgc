// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.esupportail.sgc.domain;

import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.esupportail.sgc.domain.Card;

privileged aspect Card_Roo_Finder {
    
    public static Long Card.countFindCardsByEppnAndEtatEquals(String eppn, Etat etat) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        if (etat == null) throw new IllegalArgumentException("The etat argument is required");
        EntityManager em = Card.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Card AS o WHERE o.eppn = :eppn AND o.etat = :etat", Long.class);
        q.setParameter("eppn", eppn);
        q.setParameter("etat", etat);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Card.countFindCardsByEppnAndEtatNotEquals(String eppn, Etat etat) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        if (etat == null) throw new IllegalArgumentException("The etat argument is required");
        EntityManager em = Card.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Card AS o WHERE o.eppn = :eppn AND o.etat != :etat", Long.class);
        q.setParameter("eppn", eppn);
        q.setParameter("etat", etat);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Card.countFindCardsByEppnEquals(String eppn) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        EntityManager em = Card.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Card AS o WHERE o.eppn = :eppn", Long.class);
        q.setParameter("eppn", eppn);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Card.countFindCardsByEppnLike(String eppn) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        eppn = eppn.replace('*', '%');
        if (eppn.charAt(0) != '%') {
            eppn = "%" + eppn;
        }
        if (eppn.charAt(eppn.length() - 1) != '%') {
            eppn = eppn + "%";
        }
        EntityManager em = Card.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Card AS o WHERE LOWER(o.eppn) LIKE LOWER(:eppn)", Long.class);
        q.setParameter("eppn", eppn);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Card> Card.findCardsByEppnAndEtatEquals(String eppn, Etat etat) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        if (etat == null) throw new IllegalArgumentException("The etat argument is required");
        EntityManager em = Card.entityManager();
        TypedQuery<Card> q = em.createQuery("SELECT o FROM Card AS o WHERE o.eppn = :eppn AND o.etat = :etat", Card.class);
        q.setParameter("eppn", eppn);
        q.setParameter("etat", etat);
        return q;
    }
    
    public static TypedQuery<Card> Card.findCardsByEppnAndEtatNotEquals(String eppn, Etat etat) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        if (etat == null) throw new IllegalArgumentException("The etat argument is required");
        EntityManager em = Card.entityManager();
        TypedQuery<Card> q = em.createQuery("SELECT o FROM Card AS o WHERE o.eppn = :eppn AND o.etat != :etat", Card.class);
        q.setParameter("eppn", eppn);
        q.setParameter("etat", etat);
        return q;
    }
    
    public static TypedQuery<Card> Card.findCardsByEppnAndEtatNotEquals(String eppn, Etat etat, String sortFieldName, String sortOrder) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        if (etat == null) throw new IllegalArgumentException("The etat argument is required");
        EntityManager em = Card.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Card AS o WHERE o.eppn = :eppn AND o.etat != :etat");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Card> q = em.createQuery(queryBuilder.toString(), Card.class);
        q.setParameter("eppn", eppn);
        q.setParameter("etat", etat);
        return q;
    }
    
    public static TypedQuery<Card> Card.findCardsByEppnEquals(String eppn) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        EntityManager em = Card.entityManager();
        TypedQuery<Card> q = em.createQuery("SELECT o FROM Card AS o WHERE o.eppn = :eppn", Card.class);
        q.setParameter("eppn", eppn);
        return q;
    }
    
    public static TypedQuery<Card> Card.findCardsByEppnEquals(String eppn, String sortFieldName, String sortOrder) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        EntityManager em = Card.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Card AS o WHERE o.eppn = :eppn");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Card> q = em.createQuery(queryBuilder.toString(), Card.class);
        q.setParameter("eppn", eppn);
        return q;
    }
    
    public static TypedQuery<Card> Card.findCardsByEppnLike(String eppn) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        eppn = eppn.replace('*', '%');
        if (eppn.charAt(0) != '%') {
            eppn = "%" + eppn;
        }
        if (eppn.charAt(eppn.length() - 1) != '%') {
            eppn = eppn + "%";
        }
        EntityManager em = Card.entityManager();
        TypedQuery<Card> q = em.createQuery("SELECT o FROM Card AS o WHERE LOWER(o.eppn) LIKE LOWER(:eppn)", Card.class);
        q.setParameter("eppn", eppn);
        return q;
    }
    
    public static TypedQuery<Card> Card.findCardsByEppnLike(String eppn, String sortFieldName, String sortOrder) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        eppn = eppn.replace('*', '%');
        if (eppn.charAt(0) != '%') {
            eppn = "%" + eppn;
        }
        if (eppn.charAt(eppn.length() - 1) != '%') {
            eppn = eppn + "%";
        }
        EntityManager em = Card.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Card AS o WHERE LOWER(o.eppn) LIKE LOWER(:eppn)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Card> q = em.createQuery(queryBuilder.toString(), Card.class);
        q.setParameter("eppn", eppn);
        return q;
    }

    
}
