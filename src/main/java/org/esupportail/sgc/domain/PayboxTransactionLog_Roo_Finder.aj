// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.esupportail.sgc.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.esupportail.sgc.domain.PayboxTransactionLog;

privileged aspect PayboxTransactionLog_Roo_Finder {
    
    public static Long PayboxTransactionLog.countFindPayboxTransactionLogsByEppnEquals(String eppn) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        EntityManager em = PayboxTransactionLog.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM PayboxTransactionLog AS o WHERE o.eppn = :eppn", Long.class);
        q.setParameter("eppn", eppn);
        return ((Long) q.getSingleResult());
    }
    
    public static Long PayboxTransactionLog.countFindPayboxTransactionLogsByIdtransEquals(String idtrans) {
        if (idtrans == null || idtrans.length() == 0) throw new IllegalArgumentException("The idtrans argument is required");
        EntityManager em = PayboxTransactionLog.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM PayboxTransactionLog AS o WHERE o.idtrans = :idtrans", Long.class);
        q.setParameter("idtrans", idtrans);
        return ((Long) q.getSingleResult());
    }
    
    public static Long PayboxTransactionLog.countFindPayboxTransactionLogsByReferenceEquals(String reference) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        EntityManager em = PayboxTransactionLog.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM PayboxTransactionLog AS o WHERE o.reference = :reference", Long.class);
        q.setParameter("reference", reference);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<PayboxTransactionLog> PayboxTransactionLog.findPayboxTransactionLogsByEppnEquals(String eppn) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        EntityManager em = PayboxTransactionLog.entityManager();
        TypedQuery<PayboxTransactionLog> q = em.createQuery("SELECT o FROM PayboxTransactionLog AS o WHERE o.eppn = :eppn", PayboxTransactionLog.class);
        q.setParameter("eppn", eppn);
        return q;
    }
    
    public static TypedQuery<PayboxTransactionLog> PayboxTransactionLog.findPayboxTransactionLogsByEppnEquals(String eppn, String sortFieldName, String sortOrder) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        EntityManager em = PayboxTransactionLog.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM PayboxTransactionLog AS o WHERE o.eppn = :eppn");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<PayboxTransactionLog> q = em.createQuery(queryBuilder.toString(), PayboxTransactionLog.class);
        q.setParameter("eppn", eppn);
        return q;
    }
    
    public static TypedQuery<PayboxTransactionLog> PayboxTransactionLog.findPayboxTransactionLogsByIdtransEquals(String idtrans) {
        if (idtrans == null || idtrans.length() == 0) throw new IllegalArgumentException("The idtrans argument is required");
        EntityManager em = PayboxTransactionLog.entityManager();
        TypedQuery<PayboxTransactionLog> q = em.createQuery("SELECT o FROM PayboxTransactionLog AS o WHERE o.idtrans = :idtrans", PayboxTransactionLog.class);
        q.setParameter("idtrans", idtrans);
        return q;
    }
    
    public static TypedQuery<PayboxTransactionLog> PayboxTransactionLog.findPayboxTransactionLogsByIdtransEquals(String idtrans, String sortFieldName, String sortOrder) {
        if (idtrans == null || idtrans.length() == 0) throw new IllegalArgumentException("The idtrans argument is required");
        EntityManager em = PayboxTransactionLog.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM PayboxTransactionLog AS o WHERE o.idtrans = :idtrans");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<PayboxTransactionLog> q = em.createQuery(queryBuilder.toString(), PayboxTransactionLog.class);
        q.setParameter("idtrans", idtrans);
        return q;
    }
    
    public static TypedQuery<PayboxTransactionLog> PayboxTransactionLog.findPayboxTransactionLogsByReferenceEquals(String reference) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        EntityManager em = PayboxTransactionLog.entityManager();
        TypedQuery<PayboxTransactionLog> q = em.createQuery("SELECT o FROM PayboxTransactionLog AS o WHERE o.reference = :reference", PayboxTransactionLog.class);
        q.setParameter("reference", reference);
        return q;
    }
    
    public static TypedQuery<PayboxTransactionLog> PayboxTransactionLog.findPayboxTransactionLogsByReferenceEquals(String reference, String sortFieldName, String sortOrder) {
        if (reference == null || reference.length() == 0) throw new IllegalArgumentException("The reference argument is required");
        EntityManager em = PayboxTransactionLog.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM PayboxTransactionLog AS o WHERE o.reference = :reference");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<PayboxTransactionLog> q = em.createQuery(queryBuilder.toString(), PayboxTransactionLog.class);
        q.setParameter("reference", reference);
        return q;
    }
    
}
