// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.esupportail.sgc.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.esupportail.sgc.domain.AppliConfig;

privileged aspect AppliConfig_Roo_Finder {
    
    public static Long AppliConfig.countFindAppliConfigsByKeyEquals(String key) {
        if (key == null || key.length() == 0) throw new IllegalArgumentException("The key argument is required");
        EntityManager em = AppliConfig.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AppliConfig AS o WHERE o.key = :key", Long.class);
        q.setParameter("key", key);
        return ((Long) q.getSingleResult());
    }
    
    public static Long AppliConfig.countFindAppliConfigsByKeyLike(String key) {
        if (key == null || key.length() == 0) throw new IllegalArgumentException("The key argument is required");
        key = key.replace('*', '%');
        if (key.charAt(0) != '%') {
            key = "%" + key;
        }
        if (key.charAt(key.length() - 1) != '%') {
            key = key + "%";
        }
        EntityManager em = AppliConfig.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AppliConfig AS o WHERE LOWER(o.key) LIKE LOWER(:key)", Long.class);
        q.setParameter("key", key);
        return ((Long) q.getSingleResult());
    }
    
    public static Long AppliConfig.countFindAppliConfigsByValueLike(String value) {
        if (value == null || value.length() == 0) throw new IllegalArgumentException("The value argument is required");
        value = value.replace('*', '%');
        if (value.charAt(0) != '%') {
            value = "%" + value;
        }
        if (value.charAt(value.length() - 1) != '%') {
            value = value + "%";
        }
        EntityManager em = AppliConfig.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM AppliConfig AS o WHERE LOWER(o.value) LIKE LOWER(:value)", Long.class);
        q.setParameter("value", value);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<AppliConfig> AppliConfig.findAppliConfigsByKeyEquals(String key) {
        if (key == null || key.length() == 0) throw new IllegalArgumentException("The key argument is required");
        EntityManager em = AppliConfig.entityManager();
        TypedQuery<AppliConfig> q = em.createQuery("SELECT o FROM AppliConfig AS o WHERE o.key = :key", AppliConfig.class);
        q.setParameter("key", key);
        return q;
    }
    
    public static TypedQuery<AppliConfig> AppliConfig.findAppliConfigsByKeyEquals(String key, String sortFieldName, String sortOrder) {
        if (key == null || key.length() == 0) throw new IllegalArgumentException("The key argument is required");
        EntityManager em = AppliConfig.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM AppliConfig AS o WHERE o.key = :key");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<AppliConfig> q = em.createQuery(queryBuilder.toString(), AppliConfig.class);
        q.setParameter("key", key);
        return q;
    }
    
    public static TypedQuery<AppliConfig> AppliConfig.findAppliConfigsByKeyLike(String key) {
        if (key == null || key.length() == 0) throw new IllegalArgumentException("The key argument is required");
        key = key.replace('*', '%');
        if (key.charAt(0) != '%') {
            key = "%" + key;
        }
        if (key.charAt(key.length() - 1) != '%') {
            key = key + "%";
        }
        EntityManager em = AppliConfig.entityManager();
        TypedQuery<AppliConfig> q = em.createQuery("SELECT o FROM AppliConfig AS o WHERE LOWER(o.key) LIKE LOWER(:key)", AppliConfig.class);
        q.setParameter("key", key);
        return q;
    }
    
    public static TypedQuery<AppliConfig> AppliConfig.findAppliConfigsByKeyLike(String key, String sortFieldName, String sortOrder) {
        if (key == null || key.length() == 0) throw new IllegalArgumentException("The key argument is required");
        key = key.replace('*', '%');
        if (key.charAt(0) != '%') {
            key = "%" + key;
        }
        if (key.charAt(key.length() - 1) != '%') {
            key = key + "%";
        }
        EntityManager em = AppliConfig.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM AppliConfig AS o WHERE LOWER(o.key) LIKE LOWER(:key)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<AppliConfig> q = em.createQuery(queryBuilder.toString(), AppliConfig.class);
        q.setParameter("key", key);
        return q;
    }
    
    public static TypedQuery<AppliConfig> AppliConfig.findAppliConfigsByType(TypeConfig type) {
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        EntityManager em = AppliConfig.entityManager();
        TypedQuery<AppliConfig> q = em.createQuery("SELECT o FROM AppliConfig AS o WHERE o.type = :type", AppliConfig.class);
        q.setParameter("type", type);
        return q;
    }
    
    public static TypedQuery<AppliConfig> AppliConfig.findAppliConfigsByValueLike(String value) {
        if (value == null || value.length() == 0) throw new IllegalArgumentException("The value argument is required");
        value = value.replace('*', '%');
        if (value.charAt(0) != '%') {
            value = "%" + value;
        }
        if (value.charAt(value.length() - 1) != '%') {
            value = value + "%";
        }
        EntityManager em = AppliConfig.entityManager();
        TypedQuery<AppliConfig> q = em.createQuery("SELECT o FROM AppliConfig AS o WHERE LOWER(o.value) LIKE LOWER(:value)", AppliConfig.class);
        q.setParameter("value", value);
        return q;
    }
    
    public static TypedQuery<AppliConfig> AppliConfig.findAppliConfigsByValueLike(String value, String sortFieldName, String sortOrder) {
        if (value == null || value.length() == 0) throw new IllegalArgumentException("The value argument is required");
        value = value.replace('*', '%');
        if (value.charAt(0) != '%') {
            value = "%" + value;
        }
        if (value.charAt(value.length() - 1) != '%') {
            value = value + "%";
        }
        EntityManager em = AppliConfig.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM AppliConfig AS o WHERE LOWER(o.value) LIKE LOWER(:value)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<AppliConfig> q = em.createQuery(queryBuilder.toString(), AppliConfig.class);
        q.setParameter("value", value);
        return q;
    }
    
}
