<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security" 
             xmlns:beans="http://www.springframework.org/schema/beans" 
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
             xmlns:util="http://www.springframework.org/schema/util"
             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
             					 http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                                 http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

    <http security="none" pattern="/resources/**" />

    <http security="none" pattern="/webjars/**" />
    
    <!-- HTTP security configurations -->
    <http disable-url-rewriting="true" use-expressions="true" entry-point-ref="http403EntryPoint">
		<intercept-url pattern="/j_spring_security_switch_user" access="hasRole('ROLE_ADMIN') or hasRole('ROLE_SWITCH_USER')"/>
		<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/manager/**" access="hasRole('ROLE_MANAGER') or hasRole('ROLE_CONSULT') or hasRole('ROLE_ADMIN') or hasRole('ROLE_LIVREUR')" />
		<intercept-url pattern="/login" access="isAuthenticated()"/>
		<intercept-url pattern="/wsrest/nfc/cnousCardId" access="permitAll" />
		<intercept-url pattern="/wsrest/nfc/addCrousCsvFile" access="permitAll" />
		<intercept-url pattern="/wsrest/nfc/eppnAndNumeroId" access="permitAll" />
		<intercept-url pattern="/wsrest/nfc/check4encode" access="permitAll" />
		<intercept-url pattern="/wsrest/nfc/getVersoText" access="permitAll" />
		<intercept-url pattern="/wsrest/nfc/getSecondaryId" access="permitAll" />
		<intercept-url pattern="/wsrest/nfc/**" access="hasIpAddress('127.0.0.1')" /> <!-- Esup-Nfc-Tag IP Address -->
		<intercept-url pattern="/wsrest/photo/**" access="${accessRestrictionWSRestPhoto}" />
		<intercept-url pattern="/wsrest/**" access="${accessRestrictionWSRestApi}"/>
                <intercept-url pattern="/wsescr/**" access="${accessRestrictionWSescr}"/>
		<intercept-url pattern="/**" access="permitAll" />
		<access-denied-handler error-page="/denied" />
		<session-management session-authentication-strategy-ref="sas" />
		<custom-filter before="FIRST" ref="devClientRequestFilter"/>
		<custom-filter position="PRE_AUTH_FILTER" ref="shibFilter"/>
		<custom-filter position="SWITCH_USER_FILTER" ref="switchUserProcessingFilter" />
		<custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER" />
		<custom-filter ref="resourceUrlEncodingFilter" position="LAST"/>        
		<logout logout-success-url="/" />
		<expression-handler ref="sgcWebSecurityExpressionHandler"/>
                <csrf disabled="true"/>
    </http>

	<beans:bean id="resourceUrlEncodingFilter"
		class="org.springframework.web.servlet.resource.ResourceUrlEncodingFilter"/>    

    <beans:bean id="http403EntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint"/>

    <beans:bean id="expressionHandler" class="org.springframework.security.access.expression.method.DefaultMethodSecurityExpressionHandler">
        <beans:property name="permissionEvaluator">
            <beans:bean class="org.esupportail.sgc.security.SgcPermissionEvaluator"/>
        </beans:property>
    </beans:bean>
    
    <beans:bean id="shibFilter" class="org.esupportail.sgc.security.ShibRequestHeaderAuthenticationFilter">
		<beans:property name="principalRequestHeader" value="REMOTE_USER"/>
		<beans:property name="exceptionIfHeaderMissing" value="false"/>
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="userInfoService" ref="userInfoService" />
		<beans:property name="ldapGroup2UserRoleService" ref="ldapGroup2UserRoleService" />	
		<beans:property name="resynchronisationUserService" ref="resynchronisationUserService" />
		<beans:property name="credentialsRequestHeader" value="MEMBER"/>
    </beans:bean>

    <authentication-manager alias="authenticationManager">
		<authentication-provider ref="preauthAuthProvider" />	
    </authentication-manager>
    
    
    <beans:bean id="preauthAuthProvider" class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
		<beans:property name="preAuthenticatedUserDetailsService" ref="authUserDetailsService"/>
		<beans:property name="throwExceptionWhenTokenRejected" value="true"/>
    </beans:bean>

    <beans:bean id="concurrencyFilter"
		class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<beans:constructor-arg ref="sessionRegistry"/>
		<beans:constructor-arg value="/"/>
    </beans:bean>

    <beans:bean id="sas"
		class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
		<beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
    </beans:bean>

    <beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

	<beans:bean id="authUserDetailsService"
		class="org.esupportail.sgc.security.ShibAuthenticatedUserDetailsService">
		<beans:property name="mappingGroupesRoles" ref="sgcMappingGroupesRoles"/>
		<beans:property name="ldapGroup2UserRoleService" ref="ldapGroup2UserRoleService"/>
	</beans:bean>

	<beans:bean id="switchUserProcessingFilter"
		    class="org.springframework.security.web.authentication.switchuser.SwitchUserFilter">
		<beans:property name="usernameParameter" value="j_username"/>            
		<beans:property name="userDetailsService" ref="databaseUserDetailsService" />
		<beans:property name="switchUserUrl" value="/j_spring_security_switch_user" />
		<beans:property name="exitUserUrl" value="/j_spring_security_logout" />
		<beans:property name="targetUrl" value="/" />
	</beans:bean>
	
	
	<beans:bean id="ldapGroup2UserRoleService"
		class="org.esupportail.sgc.services.ldap.LdapGroup2UserRoleService">
		<beans:property name="mappingGroupesRoles" ref="sgcMappingGroupesRoles"/>
		<beans:property name="groupService" ref="groupService"/>
	</beans:bean>


	<beans:bean id="sgcWebSecurityExpressionHandler" class="org.esupportail.sgc.security.SgcWebSecurityExpressionHandler">
	    <beans:property name="roleHierarchy" ref="sgcRoleHierarchy"/>
	</beans:bean>
	

	<util:map id="sgcMappingGroupesRoles">
		<beans:entry key="cn=for.esup-sgc.admin,ou=groups,dc=univ-ville,dc=fr" value="ROLE_ADMIN" />
		<beans:entry key="cn=for.esup-sgc.super-manager,ou=groups,dc=univ-ville,dc=fr" value="ROLE_SUPER_MANAGER" />
		<beans:entry key="cn=for.esup-sgc.livreur,ou=groups,dc=univ-ville,dc=fr" value="ROLE_LIVREUR" />
		<beans:entry key="cn=for.esup-sgc.updater,ou=groups,dc=univ-ville,dc=fr" value="ROLE_UPDATER" />
		<beans:entry key="cn=for.esup-sgc.consult,ou=groups,dc=univ-ville,dc=fr" value="ROLE_CONSULT" />
		<beans:entry key="cn=for.esup-sgc.user,ou=groups,dc=univ-ville,dc=fr" value="ROLE_USER" />
		<beans:entry key="cn=from.apogee.dossier-nok,ou=groups,dc=univ-ville,dc=fr" value="ROLE_USER_NO_EDITABLE" />
		<beans:entry key="cn=from.esup-sgc.users-cards-3years-student,ou=groups,dc=univ-ville,dc=fr" value="ROLE_USER_RENEWAL_PAYED" />
	</util:map>
	
</beans:beans>

